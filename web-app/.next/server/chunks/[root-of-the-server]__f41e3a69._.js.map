{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/rhychaw/projects/oa/web-app/src/app/api/problems/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport type { Problem, PaginatedResponse } from '../../../types';\n\n// Mock data - in a real app, this would come from a database\nconst mockProblems: Problem[] = [\n  {\n    id: '1',\n    slug: 'two-sum',\n    title: 'Two Sum',\n    description: `\n      <p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p>\n      \n      <p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>\n      \n      <p>You can return the answer in any order.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: nums = [3,2,4], target = 6\nOutput: [1,2]</code></pre>\n      \n      <h3>Example 3:</h3>\n      <pre><code>Input: nums = [3,3], target = 6\nOutput: [0,1]</code></pre>\n      \n      <h3>Constraints:</h3>\n      <ul>\n        <li><code>2 <= nums.length <= 10<sup>4</sup></code></li>\n        <li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\n        <li><code>-10<sup>9</sup> <= target <= 10<sup>9</sup></code></li>\n        <li>Only one valid answer exists.</li>\n      </ul>\n    `,\n    difficulty: 'easy',\n    tags: ['array', 'hash-table'],\n    timeLimit: 2,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '[2,7,11,15]\\n9',\n        expectedOutput: '[0,1]',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '[3,2,4]\\n6',\n        expectedOutput: '[1,2]',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '3',\n        input: '[3,3]\\n6',\n        expectedOutput: '[0,1]',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'abc123',\n    points: 10,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: '2',\n    slug: 'add-two-numbers',\n    title: 'Add Two Numbers',\n    description: `\n      <p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n      \n      <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: l1 = [0], l2 = [0]\nOutput: [0]</code></pre>\n      \n      <h3>Example 3:</h3>\n      <pre><code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]</code></pre>\n    `,\n    difficulty: 'medium',\n    tags: ['linked-list', 'math', 'recursion'],\n    timeLimit: 3,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '[2,4,3]\\n[5,6,4]',\n        expectedOutput: '[7,0,8]',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '[0]\\n[0]',\n        expectedOutput: '[0]',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'def456',\n    points: 20,\n    createdAt: '2024-01-02T00:00:00Z',\n    updatedAt: '2024-01-02T00:00:00Z',\n  },\n  {\n    id: '3',\n    slug: 'longest-substring-without-repeating-characters',\n    title: 'Longest Substring Without Repeating Characters',\n    description: `\n      <p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.</code></pre>\n      \n      <h3>Example 3:</h3>\n      <pre><code>Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.</code></pre>\n    `,\n    difficulty: 'medium',\n    tags: ['hash-table', 'string', 'sliding-window'],\n    timeLimit: 3,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '\"abcabcbb\"',\n        expectedOutput: '3',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '\"bbbbb\"',\n        expectedOutput: '1',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '3',\n        input: '\"pwwkew\"',\n        expectedOutput: '3',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'ghi789',\n    points: 25,\n    createdAt: '2024-01-03T00:00:00Z',\n    updatedAt: '2024-01-03T00:00:00Z',\n  },\n  {\n    id: '4',\n    slug: 'median-of-two-sorted-arrays',\n    title: 'Median of Two Sorted Arrays',\n    description: `\n      <p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n      \n      <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.</code></pre>\n    `,\n    difficulty: 'hard',\n    tags: ['array', 'binary-search', 'divide-and-conquer'],\n    timeLimit: 5,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '[1,3]\\n[2]',\n        expectedOutput: '2.00000',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '[1,2]\\n[3,4]',\n        expectedOutput: '2.50000',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'jkl012',\n    points: 50,\n    createdAt: '2024-01-04T00:00:00Z',\n    updatedAt: '2024-01-04T00:00:00Z',\n  },\n];\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  \n  const page = parseInt(searchParams.get('page') || '1');\n  const limit = parseInt(searchParams.get('limit') || '12');\n  const difficulty = searchParams.get('difficulty');\n  const tags = searchParams.get('tags')?.split(',');\n  const search = searchParams.get('search');\n\n  let filteredProblems = [...mockProblems];\n\n  // Filter by difficulty\n  if (difficulty && difficulty !== 'all') {\n    filteredProblems = filteredProblems.filter(p => p.difficulty === difficulty);\n  }\n\n  // Filter by tags\n  if (tags && tags.length > 0) {\n    filteredProblems = filteredProblems.filter(p => \n      tags.some(tag => p.tags.includes(tag))\n    );\n  }\n\n  // Filter by search\n  if (search) {\n    const searchLower = search.toLowerCase();\n    filteredProblems = filteredProblems.filter(p => \n      p.title.toLowerCase().includes(searchLower) ||\n      p.description.toLowerCase().includes(searchLower) ||\n      p.tags.some(tag => tag.toLowerCase().includes(searchLower))\n    );\n  }\n\n  // Pagination\n  const startIndex = (page - 1) * limit;\n  const endIndex = startIndex + limit;\n  const paginatedProblems = filteredProblems.slice(startIndex, endIndex);\n\n  const response: PaginatedResponse<Problem> = {\n    data: paginatedProblems,\n    pagination: {\n      page,\n      limit,\n      total: filteredProblems.length,\n      totalPages: Math.ceil(filteredProblems.length / limit),\n    },\n  };\n\n  return NextResponse.json(response);\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}