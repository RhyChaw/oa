{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/rhychaw/projects/oa/web-app/src/app/api/problems/%5Bslug%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport type { Problem } from '../../../../types';\n\n// Mock data - in a real app, this would come from a database\nconst mockProblems: Record<string, Problem> = {\n  'two-sum': {\n    id: '1',\n    slug: 'two-sum',\n    title: 'Two Sum',\n    description: `\n      <p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p>\n      \n      <p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>\n      \n      <p>You can return the answer in any order.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: nums = [3,2,4], target = 6\nOutput: [1,2]</code></pre>\n      \n      <h3>Example 3:</h3>\n      <pre><code>Input: nums = [3,3], target = 6\nOutput: [0,1]</code></pre>\n      \n      <h3>Constraints:</h3>\n      <ul>\n        <li><code>2 <= nums.length <= 10<sup>4</sup></code></li>\n        <li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\n        <li><code>-10<sup>9</sup> <= target <= 10<sup>9</sup></code></li>\n        <li>Only one valid answer exists.</li>\n      </ul>\n    `,\n    difficulty: 'easy',\n    tags: ['array', 'hash-table'],\n    timeLimit: 2,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '[2,7,11,15]\\n9',\n        expectedOutput: '[0,1]',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '[3,2,4]\\n6',\n        expectedOutput: '[1,2]',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '3',\n        input: '[3,3]\\n6',\n        expectedOutput: '[0,1]',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'abc123',\n    points: 10,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  },\n  'add-two-numbers': {\n    id: '2',\n    slug: 'add-two-numbers',\n    title: 'Add Two Numbers',\n    description: `\n      <p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n      \n      <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: l1 = [0], l2 = [0]\nOutput: [0]</code></pre>\n      \n      <h3>Example 3:</h3>\n      <pre><code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]</code></pre>\n    `,\n    difficulty: 'medium',\n    tags: ['linked-list', 'math', 'recursion'],\n    timeLimit: 3,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '[2,4,3]\\n[5,6,4]',\n        expectedOutput: '[7,0,8]',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '[0]\\n[0]',\n        expectedOutput: '[0]',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'def456',\n    points: 20,\n    createdAt: '2024-01-02T00:00:00Z',\n    updatedAt: '2024-01-02T00:00:00Z',\n  },\n  'longest-substring-without-repeating-characters': {\n    id: '3',\n    slug: 'longest-substring-without-repeating-characters',\n    title: 'Longest Substring Without Repeating Characters',\n    description: `\n      <p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.</code></pre>\n      \n      <h3>Example 3:</h3>\n      <pre><code>Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.</code></pre>\n    `,\n    difficulty: 'medium',\n    tags: ['hash-table', 'string', 'sliding-window'],\n    timeLimit: 3,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '\"abcabcbb\"',\n        expectedOutput: '3',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '\"bbbbb\"',\n        expectedOutput: '1',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '3',\n        input: '\"pwwkew\"',\n        expectedOutput: '3',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'ghi789',\n    points: 25,\n    createdAt: '2024-01-03T00:00:00Z',\n    updatedAt: '2024-01-03T00:00:00Z',\n  },\n  'median-of-two-sorted-arrays': {\n    id: '4',\n    slug: 'median-of-two-sorted-arrays',\n    title: 'Median of Two Sorted Arrays',\n    description: `\n      <p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n      \n      <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n      \n      <h3>Example 1:</h3>\n      <pre><code>Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.</code></pre>\n      \n      <h3>Example 2:</h3>\n      <pre><code>Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.</code></pre>\n    `,\n    difficulty: 'hard',\n    tags: ['array', 'binary-search', 'divide-and-conquer'],\n    timeLimit: 5,\n    memoryLimit: 50,\n    canonicalLanguageHints: ['javascript', 'python', 'java'],\n    canonicalTestCases: [\n      {\n        id: '1',\n        input: '[1,3]\\n[2]',\n        expectedOutput: '2.00000',\n        visibility: 'public',\n        weight: 1,\n      },\n      {\n        id: '2',\n        input: '[1,2]\\n[3,4]',\n        expectedOutput: '2.50000',\n        visibility: 'public',\n        weight: 1,\n      },\n    ],\n    canonicalSolutionHash: 'jkl012',\n    points: 50,\n    createdAt: '2024-01-04T00:00:00Z',\n    updatedAt: '2024-01-04T00:00:00Z',\n  },\n};\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ slug: string }> }\n) {\n  const { slug } = await params;\n  \n  const problem = mockProblems[slug];\n  \n  if (!problem) {\n    return NextResponse.json(\n      { success: false, message: 'Problem not found' },\n      { status: 404 }\n    );\n  }\n\n  return NextResponse.json({ success: true, data: problem });\n}\n"],"names":[],"mappings":";;;;AAAA;;AAGA,6DAA6D;AAC7D,MAAM,eAAwC;IAC5C,WAAW;QACT,IAAI;QACJ,MAAM;QACN,OAAO;QACP,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2Bd,CAAC;QACD,YAAY;QACZ,MAAM;YAAC;YAAS;SAAa;QAC7B,WAAW;QACX,aAAa;QACb,wBAAwB;YAAC;YAAc;YAAU;SAAO;QACxD,oBAAoB;YAClB;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;SACD;QACD,uBAAuB;QACvB,QAAQ;QACR,WAAW;QACX,WAAW;IACb;IACA,mBAAmB;QACjB,IAAI;QACJ,MAAM;QACN,OAAO;QACP,aAAa,CAAC;;;;;;;;;;;;;;;;;IAiBd,CAAC;QACD,YAAY;QACZ,MAAM;YAAC;YAAe;YAAQ;SAAY;QAC1C,WAAW;QACX,aAAa;QACb,wBAAwB;YAAC;YAAc;YAAU;SAAO;QACxD,oBAAoB;YAClB;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;SACD;QACD,uBAAuB;QACvB,QAAQ;QACR,WAAW;QACX,WAAW;IACb;IACA,kDAAkD;QAChD,IAAI;QACJ,MAAM;QACN,OAAO;QACP,aAAa,CAAC;;;;;;;;;;;;;;;;;;IAkBd,CAAC;QACD,YAAY;QACZ,MAAM;YAAC;YAAc;YAAU;SAAiB;QAChD,WAAW;QACX,aAAa;QACb,wBAAwB;YAAC;YAAc;YAAU;SAAO;QACxD,oBAAoB;YAClB;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;SACD;QACD,uBAAuB;QACvB,QAAQ;QACR,WAAW;QACX,WAAW;IACb;IACA,+BAA+B;QAC7B,IAAI;QACJ,MAAM;QACN,OAAO;QACP,aAAa,CAAC;;;;;;;;;;;;;;IAcd,CAAC;QACD,YAAY;QACZ,MAAM;YAAC;YAAS;YAAiB;SAAqB;QACtD,WAAW;QACX,aAAa;QACb,wBAAwB;YAAC;YAAc;YAAU;SAAO;QACxD,oBAAoB;YAClB;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,gBAAgB;gBAChB,YAAY;gBACZ,QAAQ;YACV;SACD;QACD,uBAAuB;QACvB,QAAQ;QACR,WAAW;QACX,WAAW;IACb;AACF;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAyC;IAEjD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM;IAEvB,MAAM,UAAU,YAAY,CAAC,KAAK;IAElC,IAAI,CAAC,SAAS;QACZ,OAAO,sJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAoB,GAC/C;YAAE,QAAQ;QAAI;IAElB;IAEA,OAAO,sJAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAM,MAAM;IAAQ;AAC1D","debugId":null}}]
}